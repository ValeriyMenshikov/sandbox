# coding: utf-8
"""
Generated by restcodegen (https://github.com/ValeriyMenshikov/restcodegen).

    source: dm_api_forum
    version: 1.1.1

    Do not edit the class manually.
"""  # noqa: E501

from typing import Any

from httpx import Response
from restcodegen.restclient import AsyncClient

from application.clients.http.dm_api_forum.models.api_models import (
    ForumEnvelope,
    ForumListEnvelope,
    Topic,
    TopicEnvelope,
    TopicListEnvelope,
    UserListEnvelope,
)


class ForumApi:
    def __init__(self, api_client: AsyncClient) -> None:
        self.api_client = api_client

    async def get_v1_fora(
        self,
        x_dm_auth_token: str = "",
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> ForumListEnvelope:
        """
                Get list of available fora.

        Args:
                    x_dm_auth_token(str, optional): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with user defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
                    ForumListEnvelope: ...
        """  # noqa: D205,E501
        response = await self.get_v1_fora_with_http_info(
            x_dm_auth_token=x_dm_auth_token,
            x_dm_bb_render_mode=x_dm_bb_render_mode,
            **kwargs,
        )
        return ForumListEnvelope.model_validate_json(response.text)

    async def get_v1_fora_with_http_info(
        self,
        x_dm_auth_token: str = "",
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> Response:
        """
                Get list of available fora.

        Args:
                    x_dm_auth_token(str, optional): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with user defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
                    Response: ...
        """  # noqa: D205,E501
        # process the header parameters
        headers_map = {
            "X-Dm-Auth-Token": str(x_dm_auth_token),
            "X-Dm-Bb-Render-Mode": str(x_dm_bb_render_mode),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers.update(kwargs.pop("headers", {}))

        response = await self.api_client.get(
            url="/v1/fora",
            headers=headers,
            **kwargs,
        )
        return response

    async def get_v1_fora_id(
        self,
        id_: str,
        x_dm_auth_token: str = "",
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> ForumEnvelope:
        """
                Get certain forum.

        Args:
                    id_(str, required): Forum id
                    x_dm_auth_token(str, optional): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with user defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
                    ForumEnvelope: ...
        """  # noqa: D205,E501
        response = await self.get_v1_fora_id_with_http_info(
            id_=id_,
            x_dm_auth_token=x_dm_auth_token,
            x_dm_bb_render_mode=x_dm_bb_render_mode,
            **kwargs,
        )
        return ForumEnvelope.model_validate_json(response.text)

    async def get_v1_fora_id_with_http_info(
        self,
        id_: str,
        x_dm_auth_token: str = "",
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> Response:
        """
                Get certain forum.

        Args:
                    id_(str, required): Forum id
                    x_dm_auth_token(str, optional): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with user defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
                    Response: ...
        """  # noqa: D205,E501
        # process the header parameters
        headers_map = {
            "X-Dm-Auth-Token": str(x_dm_auth_token),
            "X-Dm-Bb-Render-Mode": str(x_dm_bb_render_mode),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers.update(kwargs.pop("headers", {}))

        response = await self.api_client.get(
            url=f"/v1/fora/{id_}",
            headers=headers,
            **kwargs,
        )
        return response

    async def delete_v1_fora_id__comments_unread(
        self,
        id_: str,
        x_dm_auth_token: str,
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> Response:
        """
                Mark all forum comments as read.

        Args:
                    id_(str, required): Forum id
                    x_dm_auth_token(str, required): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with user defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
                    None: ...
        """  # noqa: D205,E501
        response = await self.delete_v1_fora_id__comments_unread_with_http_info(
            id_=id_,
            x_dm_auth_token=x_dm_auth_token,
            x_dm_bb_render_mode=x_dm_bb_render_mode,
            **kwargs,
        )
        return response

    async def delete_v1_fora_id__comments_unread_with_http_info(
        self,
        id_: str,
        x_dm_auth_token: str,
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> Response:
        """
                Mark all forum comments as read.

        Args:
                    id_(str, required): Forum id
                    x_dm_auth_token(str, required): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with user defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
                    Response: ...
        """  # noqa: D205,E501
        # process the header parameters
        headers_map = {
            "X-Dm-Auth-Token": str(x_dm_auth_token),
            "X-Dm-Bb-Render-Mode": str(x_dm_bb_render_mode),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers.update(kwargs.pop("headers", {}))

        response = await self.api_client.delete(
            url=f"/v1/fora/{id_}/comments/unread",
            headers=headers,
            **kwargs,
        )
        return response

    async def get_v1_fora_id__moderators(
        self,
        id_: str,
        x_dm_auth_token: str = "",
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> UserListEnvelope:
        """
                Get forum moderators.

        Args:
                    id_(str, required): Forum id
                    x_dm_auth_token(str, optional): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with user defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
                    UserListEnvelope: ...
        """  # noqa: D205,E501
        response = await self.get_v1_fora_id__moderators_with_http_info(
            id_=id_,
            x_dm_auth_token=x_dm_auth_token,
            x_dm_bb_render_mode=x_dm_bb_render_mode,
            **kwargs,
        )
        return UserListEnvelope.model_validate_json(response.text)

    async def get_v1_fora_id__moderators_with_http_info(
        self,
        id_: str,
        x_dm_auth_token: str = "",
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> Response:
        """
                Get forum moderators.

        Args:
                    id_(str, required): Forum id
                    x_dm_auth_token(str, optional): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with user defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
                    Response: ...
        """  # noqa: D205,E501
        # process the header parameters
        headers_map = {
            "X-Dm-Auth-Token": str(x_dm_auth_token),
            "X-Dm-Bb-Render-Mode": str(x_dm_bb_render_mode),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers.update(kwargs.pop("headers", {}))

        response = await self.api_client.get(
            url=f"/v1/fora/{id_}/moderators",
            headers=headers,
            **kwargs,
        )
        return response

    async def get_v1_fora_id__topics(
        self,
        id_: str,
        attached: bool,
        skip: int,
        number: int,
        size: int,
        x_dm_auth_token: str = "",
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> TopicListEnvelope:
        """
                Get list of forum topics.

        Args:
                    id_(str, required): Forum id
                    attached(bool, optional): Filter attached/non attached
                    skip(int, optional): ...
                    number(int, optional): ...
                    size(int, optional): ...
                    x_dm_auth_token(str, optional): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with user defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
                    TopicListEnvelope: ...
        """  # noqa: D205,E501
        response = await self.get_v1_fora_id__topics_with_http_info(
            id_=id_,
            attached=attached,
            skip=skip,
            number=number,
            size=size,
            x_dm_auth_token=x_dm_auth_token,
            x_dm_bb_render_mode=x_dm_bb_render_mode,
            **kwargs,
        )
        return TopicListEnvelope.model_validate_json(response.text)

    async def get_v1_fora_id__topics_with_http_info(
        self,
        id_: str,
        attached: bool,
        skip: int,
        number: int,
        size: int,
        x_dm_auth_token: str = "",
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> Response:
        """
                Get list of forum topics.

        Args:
                    id_(str, required): Forum id
                    attached(bool, optional): Filter attached/non attached
                    skip(int, optional): ...
                    number(int, optional): ...
                    size(int, optional): ...
                    x_dm_auth_token(str, optional): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with user defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
                    Response: ...
        """  # noqa: D205,E501
        # process the query parameters
        params_map = {
            "attached": attached,
            "skip": skip,
            "number": number,
            "size": size,
        }
        params = {k: v for k, v in params_map.items() if v}
        # process the header parameters
        headers_map = {
            "X-Dm-Auth-Token": str(x_dm_auth_token),
            "X-Dm-Bb-Render-Mode": str(x_dm_bb_render_mode),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers.update(kwargs.pop("headers", {}))

        response = await self.api_client.get(
            url=f"/v1/fora/{id_}/topics",
            params=params,
            headers=headers,
            **kwargs,
        )
        return response

    async def post_v1_fora_id__topics(
        self,
        topic: Topic,  # noqa: E501
        id_: str,
        x_dm_auth_token: str,
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> TopicEnvelope:
        """
                Post new topic.

        Args:
                    topic(Topic): ...
                    id_(str, required): Forum id
                    x_dm_auth_token(str, required): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with user defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
                    TopicEnvelope: ...
        """  # noqa: D205,E501
        response = await self.post_v1_fora_id__topics_with_http_info(
            id_=id_,
            topic=topic,  # noqa: E501
            x_dm_auth_token=x_dm_auth_token,
            x_dm_bb_render_mode=x_dm_bb_render_mode,
            **kwargs,
        )
        return TopicEnvelope.model_validate_json(response.text)

    async def post_v1_fora_id__topics_with_http_info(
        self,
        topic: Topic,  # noqa: E501
        id_: str,
        x_dm_auth_token: str,
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> Response:
        """
                Post new topic.

        Args:
                    topic(Topic): ...
                    id_(str, required): Forum id
                    x_dm_auth_token(str, required): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with user defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
                    Response: ...
        """  # noqa: D205,E501
        # process the header parameters
        headers_map = {
            "X-Dm-Auth-Token": str(x_dm_auth_token),
            "X-Dm-Bb-Render-Mode": str(x_dm_bb_render_mode),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers.update(kwargs.pop("headers", {}))

        content = topic.model_dump_json(exclude_none=True, by_alias=True)  # noqa: E501
        headers.update({"Content-Type": "application/json"})

        response = await self.api_client.post(
            url=f"/v1/fora/{id_}/topics",
            content=content,
            headers=headers,
            **kwargs,
        )
        return response
