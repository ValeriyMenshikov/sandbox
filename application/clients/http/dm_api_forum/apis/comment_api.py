# coding: utf-8
"""
Generated by restcodegen (https://github.com/ValeriyMenshikov/restcodegen).

    source: dm_api_forum
    version: 1.1.1

    Do not edit the class manually.
"""  # noqa: E501

from typing import Any

from httpx import Response
from restcodegen.restclient import AsyncClient

from application.clients.http.dm_api_forum.models.api_models import (
    Comment,
    CommentEnvelope,
    UserEnvelope,
)


class CommentApi:
    def __init__(self, api_client: AsyncClient) -> None:
        self.api_client = api_client

    async def get_v1_forum_comments_id(
        self,
        id_: str,
        x_dm_auth_token: str = "",
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> CommentEnvelope:
        """
                Get comment.

        Args:
                    id_(str, required): ...
                    x_dm_auth_token(str, optional): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with user defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
                    CommentEnvelope: ...
        """  # noqa: D205,E501
        response = await self.get_v1_forum_comments_id_with_http_info(
            id_=id_,
            x_dm_auth_token=x_dm_auth_token,
            x_dm_bb_render_mode=x_dm_bb_render_mode,
            **kwargs,
        )
        return CommentEnvelope.model_validate_json(response.text)

    async def get_v1_forum_comments_id_with_http_info(
        self,
        id_: str,
        x_dm_auth_token: str = "",
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> Response:
        """
                Get comment.

        Args:
                    id_(str, required): ...
                    x_dm_auth_token(str, optional): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with user defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
                    Response: ...
        """  # noqa: D205,E501
        # process the header parameters
        headers_map = {
            "X-Dm-Auth-Token": str(x_dm_auth_token),
            "X-Dm-Bb-Render-Mode": str(x_dm_bb_render_mode),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers.update(kwargs.pop("headers", {}))

        response = await self.api_client.get(
            url=f"/v1/forum/comments/{id_}",
            headers=headers,
            **kwargs,
        )
        return response

    async def patch_v1_forum_comments_id(
        self,
        comment: Comment,  # noqa: E501
        id_: str,
        x_dm_auth_token: str,
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> CommentEnvelope:
        """
                Update comment.

        Args:
                    comment(Comment): ...
                    id_(str, required): ...
                    x_dm_auth_token(str, required): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with user defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
                    CommentEnvelope: ...
        """  # noqa: D205,E501
        response = await self.patch_v1_forum_comments_id_with_http_info(
            id_=id_,
            comment=comment,  # noqa: E501
            x_dm_auth_token=x_dm_auth_token,
            x_dm_bb_render_mode=x_dm_bb_render_mode,
            **kwargs,
        )
        return CommentEnvelope.model_validate_json(response.text)

    async def patch_v1_forum_comments_id_with_http_info(
        self,
        comment: Comment,  # noqa: E501
        id_: str,
        x_dm_auth_token: str,
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> Response:
        """
                Update comment.

        Args:
                    comment(Comment): ...
                    id_(str, required): ...
                    x_dm_auth_token(str, required): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with user defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
                    Response: ...
        """  # noqa: D205,E501
        # process the header parameters
        headers_map = {
            "X-Dm-Auth-Token": str(x_dm_auth_token),
            "X-Dm-Bb-Render-Mode": str(x_dm_bb_render_mode),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers.update(kwargs.pop("headers", {}))

        content = comment.model_dump_json(exclude_none=True, by_alias=True)  # noqa: E501
        headers.update({"Content-Type": "application/json"})

        response = await self.api_client.patch(
            url=f"/v1/forum/comments/{id_}",
            content=content,
            headers=headers,
            **kwargs,
        )
        return response

    async def delete_v1_forum_comments_id(
        self,
        id_: str,
        x_dm_auth_token: str,
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> Response:
        """
                Delete comment.

        Args:
                    id_(str, required): ...
                    x_dm_auth_token(str, required): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with user defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
                    None: ...
        """  # noqa: D205,E501
        response = await self.delete_v1_forum_comments_id_with_http_info(
            id_=id_,
            x_dm_auth_token=x_dm_auth_token,
            x_dm_bb_render_mode=x_dm_bb_render_mode,
            **kwargs,
        )
        return response

    async def delete_v1_forum_comments_id_with_http_info(
        self,
        id_: str,
        x_dm_auth_token: str,
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> Response:
        """
                Delete comment.

        Args:
                    id_(str, required): ...
                    x_dm_auth_token(str, required): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with user defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
                    Response: ...
        """  # noqa: D205,E501
        # process the header parameters
        headers_map = {
            "X-Dm-Auth-Token": str(x_dm_auth_token),
            "X-Dm-Bb-Render-Mode": str(x_dm_bb_render_mode),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers.update(kwargs.pop("headers", {}))

        response = await self.api_client.delete(
            url=f"/v1/forum/comments/{id_}",
            headers=headers,
            **kwargs,
        )
        return response

    async def post_v1_forum_comments_id__likes(
        self,
        id_: str,
        x_dm_auth_token: str,
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> UserEnvelope:
        """
                Post new like.

        Args:
                    id_(str, required): ...
                    x_dm_auth_token(str, required): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with user defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
                    UserEnvelope: ...
        """  # noqa: D205,E501
        response = await self.post_v1_forum_comments_id__likes_with_http_info(
            id_=id_,
            x_dm_auth_token=x_dm_auth_token,
            x_dm_bb_render_mode=x_dm_bb_render_mode,
            **kwargs,
        )
        return UserEnvelope.model_validate_json(response.text)

    async def post_v1_forum_comments_id__likes_with_http_info(
        self,
        id_: str,
        x_dm_auth_token: str,
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> Response:
        """
                Post new like.

        Args:
                    id_(str, required): ...
                    x_dm_auth_token(str, required): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with user defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
                    Response: ...
        """  # noqa: D205,E501
        # process the header parameters
        headers_map = {
            "X-Dm-Auth-Token": str(x_dm_auth_token),
            "X-Dm-Bb-Render-Mode": str(x_dm_bb_render_mode),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers.update(kwargs.pop("headers", {}))

        response = await self.api_client.post(
            url=f"/v1/forum/comments/{id_}/likes",
            headers=headers,
            **kwargs,
        )
        return response

    async def delete_v1_forum_comments_id__likes(
        self,
        id_: str,
        x_dm_auth_token: str,
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> Response:
        """
                Delete like.

        Args:
                    id_(str, required): ...
                    x_dm_auth_token(str, required): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with user defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
                    None: ...
        """  # noqa: D205,E501
        response = await self.delete_v1_forum_comments_id__likes_with_http_info(
            id_=id_,
            x_dm_auth_token=x_dm_auth_token,
            x_dm_bb_render_mode=x_dm_bb_render_mode,
            **kwargs,
        )
        return response

    async def delete_v1_forum_comments_id__likes_with_http_info(
        self,
        id_: str,
        x_dm_auth_token: str,
        x_dm_bb_render_mode: str = "",
        **kwargs: Any,
    ) -> Response:
        """
                Delete like.

        Args:
                    id_(str, required): ...
                    x_dm_auth_token(str, required): Authenticated requests require X-Dm-Auth-Token
        header. You can get the data from POST /account/
        method, sending login and password in &#34;token&#34;
        response field
                    x_dm_bb_render_mode(str, optional): Requests with user defined texts that allows usage
        of BB-codes may be rendered differently by passing
        the X-Dm-Bb-Render-Mode header of one of following
        values Html, Bb, Text, SafeHtml
                    **kwargs: Arguments supported by the httpx library (data, files, headers, etc.)

        Returns:
                    Response: ...
        """  # noqa: D205,E501
        # process the header parameters
        headers_map = {
            "X-Dm-Auth-Token": str(x_dm_auth_token),
            "X-Dm-Bb-Render-Mode": str(x_dm_bb_render_mode),
        }
        headers = {k: str(v) for k, v in headers_map.items() if v}

        headers.update(kwargs.pop("headers", {}))

        response = await self.api_client.delete(
            url=f"/v1/forum/comments/{id_}/likes",
            headers=headers,
            **kwargs,
        )
        return response
