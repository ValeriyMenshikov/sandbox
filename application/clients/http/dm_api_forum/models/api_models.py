"""
Generated by restcodegen (https://github.com/ValeriyMenshikov/restcodegen).

    source: {{ service_name|to_snake_case }}
    version: {{ version }}

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import UUID

from pydantic import BaseModel, ConfigDict, Field


class BadRequestError(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    message: Optional[str] = Field(None, description="Client message")
    invalid_properties: Optional[Dict[str, List[str]]] = Field(
        None,
        alias="invalidProperties",
        description="Key-value pairs of invalid request properties",
    )


class BbParseMode(Enum):
    COMMON = "Common"
    INFO = "Info"
    POST = "Post"
    CHAT = "Chat"


class CommonBbText(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    value: Optional[str] = Field(None, description="Text")
    parse_mode: Optional[BbParseMode] = Field(None, alias="parseMode")


class Forum(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: Optional[str] = Field(None, description="Forum identifier")
    unread_topics_count: Optional[int] = Field(
        None,
        alias="unreadTopicsCount",
        description="Total count of topics with unread commentaries within",
    )


class ForumEnvelope(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    resource: Optional[Forum] = None
    metadata: Optional[Any] = Field(None, description="Additional metadata")


class GeneralError(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    message: Optional[str] = Field(None, description="Client message")


class Paging(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pages: Optional[int] = Field(None, description="Total pages count")
    current: Optional[int] = Field(None, description="Current page number")
    size: Optional[int] = Field(None, description="Page size")
    number: Optional[int] = Field(None, description="Entity number")
    total: Optional[int] = Field(None, description="Total entity count")


class Rating(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    enabled: Optional[bool] = Field(None, description="Rating participation flag")
    quality: Optional[int] = Field(None, description="Quality rating")
    quantity: Optional[int] = Field(None, description="Quantity rating")


class UserRole(Enum):
    GUEST = "Guest"
    PLAYER = "Player"
    ADMINISTRATOR = "Administrator"
    NANNY_MODERATOR = "NannyModerator"
    REGULAR_MODERATOR = "RegularModerator"
    SENIOR_MODERATOR = "SeniorModerator"


class ForumListEnvelope(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    resources: Optional[List[Forum]] = Field(None, description="Enveloped resources")
    paging: Optional[Paging] = None


class User(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    login: Optional[str] = Field(None, description="Login")
    roles: Optional[List[UserRole]] = Field(None, description="Roles")
    medium_picture_url: Optional[str] = Field(None, alias="mediumPictureUrl", description="Profile picture URL M-size")
    small_picture_url: Optional[str] = Field(None, alias="smallPictureUrl", description="Profile picture URL S-size")
    status: Optional[str] = Field(None, description="User defined status")
    rating: Optional[Rating] = None
    online: Optional[datetime] = Field(None, description="Last seen online moment")
    name: Optional[str] = Field(None, description="User real name")
    location: Optional[str] = Field(None, description="User real location")
    registration: Optional[datetime] = Field(None, description="User registration moment")


class UserEnvelope(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    resource: Optional[User] = None
    metadata: Optional[Any] = Field(None, description="Additional metadata")


class UserListEnvelope(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    resources: Optional[List[User]] = Field(None, description="Enveloped resources")
    paging: Optional[Paging] = None


class Comment(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: Optional[UUID] = Field(None, description="Commentary identifier")
    author: Optional[User] = None
    created: Optional[datetime] = Field(None, description="Creation moment")
    updated: Optional[datetime] = Field(None, description="Last update moment")
    text: Optional[CommonBbText] = None
    likes: Optional[List[User]] = Field(None, description="Users who liked it")


class CommentEnvelope(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    resource: Optional[Comment] = None
    metadata: Optional[Any] = Field(None, description="Additional metadata")


class CommentListEnvelope(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    resources: Optional[List[Comment]] = Field(None, description="Enveloped resources")
    paging: Optional[Paging] = None


class LastTopicComment(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    created: Optional[datetime] = Field(None, description="Creation moment")
    author: Optional[User] = None


class Topic(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: Optional[UUID] = Field(None, description="Topic identifier")
    author: Optional[User] = None
    created: Optional[datetime] = Field(None, description="Creation moment")
    title: Optional[str] = Field(None, description="Title")
    description: Optional[CommonBbText] = None
    attached: Optional[bool] = Field(None, description="Attached")
    closed: Optional[bool] = Field(None, description="Closed")
    last_comment: Optional[LastTopicComment] = Field(None, alias="lastComment")
    comments_count: Optional[int] = Field(None, alias="commentsCount", description="Total commentaries count")
    unread_comments_count: Optional[int] = Field(
        None, alias="unreadCommentsCount", description="Number of unread commentaries"
    )
    forum: Optional[Forum] = None
    likes: Optional[List[User]] = Field(None, description="Users who like this")


class TopicEnvelope(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    resource: Optional[Topic] = None
    metadata: Optional[Any] = Field(None, description="Additional metadata")


class TopicListEnvelope(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    resources: Optional[List[Topic]] = Field(None, description="Enveloped resources")
    paging: Optional[Paging] = None
